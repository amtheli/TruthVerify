"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSignInputsFromKeyPair = exports.createDidPayloadWithSignInputs = exports.createDidPayload = exports.createDidVerificationMethod = exports.createVerificationKeys = exports.createKeyPairHex = exports.createKeyPairBase64 = exports.createKeyPairRaw = exports.createSignInputsFromImportableEd25519Key = exports.ResourceModule = exports.DIDModule = exports.createCheqdSDK = exports.filterUnauthorizedMethods = exports.CheqdSDK = void 0;
const did_1 = require("./modules/did");
Object.defineProperty(exports, "DIDModule", { enumerable: true, get: function () { return did_1.DIDModule; } });
const resource_1 = require("./modules/resource");
Object.defineProperty(exports, "ResourceModule", { enumerable: true, get: function () { return resource_1.ResourceModule; } });
const _1 = require("./modules/_");
const registry_1 = require("./registry");
const signer_1 = require("./signer");
const types_1 = require("./types");
const utils_1 = require("./utils");
Object.defineProperty(exports, "createSignInputsFromImportableEd25519Key", { enumerable: true, get: function () { return utils_1.createSignInputsFromImportableEd25519Key; } });
class CheqdSDK {
    constructor(options) {
        this.protectedMethods = ['constructor', 'build', 'loadModules', 'loadRegistry'];
        if (!(options === null || options === void 0 ? void 0 : options.wallet)) {
            throw new Error('No wallet provided');
        }
        this.options = {
            authorizedMethods: [],
            network: types_1.CheqdNetwork.Testnet,
            ...options
        };
        this.methods = {};
        this.signer = new signer_1.CheqdSigningStargateClient(undefined, this.options.wallet, {});
    }
    async execute(method, ...params) {
        if (!Object.keys(this.methods).includes(method)) {
            throw new Error(`Method ${method} is not authorized`);
        }
        return await this.methods[method](...params, { sdk: this });
    }
    loadModules(modules) {
        this.options.modules = this.options.modules.map((module) => (0, _1.instantiateCheqdSDKModule)(module, this.signer, { sdk: this }));
        const methods = (0, _1.applyMixins)(this, modules);
        this.methods = { ...this.methods, ...filterUnauthorizedMethods(methods, this.options.authorizedMethods || [], this.protectedMethods) };
        for (const method of Object.keys(this.methods)) {
            // @ts-ignore
            this[method] = async (...params) => {
                return await this.execute(method, ...params);
            };
        }
        return this;
    }
    loadRegistry() {
        const registryTypes = this.options.modules.map((module) => (0, _1.instantiateCheqdSDKModuleRegistryTypes)(module)).reduce((acc, types) => {
            return [...acc, ...types];
        });
        return (0, registry_1.createDefaultCheqdRegistry)(registryTypes);
    }
    async build() {
        const registry = this.loadRegistry();
        this.signer = await signer_1.CheqdSigningStargateClient.connectWithSigner(this.options.rpcUrl, this.options.wallet, {
            registry,
        });
        return this.loadModules(this.options.modules);
    }
}
exports.CheqdSDK = CheqdSDK;
function filterUnauthorizedMethods(methods, authorizedMethods, protectedMethods) {
    let _methods = Object.keys(methods);
    if (authorizedMethods.length === 0)
        return _methods
            .filter(method => !protectedMethods.includes(method))
            .reduce((acc, method) => ({ ...acc, [method]: methods[method] }), {});
    return _methods
        .filter(method => authorizedMethods.includes(method) && !protectedMethods.includes(method))
        .reduce((acc, method) => ({ ...acc, [method]: methods[method] }), {});
}
exports.filterUnauthorizedMethods = filterUnauthorizedMethods;
async function createCheqdSDK(options) {
    return await (new CheqdSDK(options)).build();
}
exports.createCheqdSDK = createCheqdSDK;
var utils_2 = require("./utils");
Object.defineProperty(exports, "createKeyPairRaw", { enumerable: true, get: function () { return utils_2.createKeyPairRaw; } });
Object.defineProperty(exports, "createKeyPairBase64", { enumerable: true, get: function () { return utils_2.createKeyPairBase64; } });
Object.defineProperty(exports, "createKeyPairHex", { enumerable: true, get: function () { return utils_2.createKeyPairHex; } });
Object.defineProperty(exports, "createVerificationKeys", { enumerable: true, get: function () { return utils_2.createVerificationKeys; } });
Object.defineProperty(exports, "createDidVerificationMethod", { enumerable: true, get: function () { return utils_2.createDidVerificationMethod; } });
Object.defineProperty(exports, "createDidPayload", { enumerable: true, get: function () { return utils_2.createDidPayload; } });
Object.defineProperty(exports, "createDidPayloadWithSignInputs", { enumerable: true, get: function () { return utils_2.createDidPayloadWithSignInputs; } });
Object.defineProperty(exports, "createSignInputsFromKeyPair", { enumerable: true, get: function () { return utils_2.createSignInputsFromKeyPair; } });
//# sourceMappingURL=index.js.map