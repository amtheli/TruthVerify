import { OfflineSigner } from '@cosmjs/proto-signing';
import { DIDModule, MinimalImportableDIDModule } from './modules/did';
import { MinimalImportableResourcesModule, ResourceModule } from './modules/resource';
import { AbstractCheqdSDKModule } from './modules/_';
import { CheqdSigningStargateClient } from './signer';
import { CheqdNetwork, IModuleMethodMap } from './types';
import { createSignInputsFromImportableEd25519Key } from './utils';
export interface ICheqdSDKOptions {
    modules: AbstractCheqdSDKModule[];
    authorizedMethods?: string[];
    network?: CheqdNetwork;
    rpcUrl: string;
    readonly wallet: OfflineSigner;
}
export type DefaultCheqdSDKModules = MinimalImportableDIDModule & MinimalImportableResourcesModule;
export interface CheqdSDK extends DefaultCheqdSDKModules {
}
export declare class CheqdSDK {
    methods: IModuleMethodMap;
    signer: CheqdSigningStargateClient;
    options: ICheqdSDKOptions;
    private protectedMethods;
    constructor(options: ICheqdSDKOptions);
    execute<P = any, R = any>(method: string, ...params: P[]): Promise<R>;
    private loadModules;
    private loadRegistry;
    build(): Promise<CheqdSDK>;
}
export declare function filterUnauthorizedMethods(methods: IModuleMethodMap, authorizedMethods: string[], protectedMethods: string[]): IModuleMethodMap;
export declare function createCheqdSDK(options: ICheqdSDKOptions): Promise<CheqdSDK>;
export { DIDModule, ResourceModule };
export { createSignInputsFromImportableEd25519Key };
export { createKeyPairRaw, createKeyPairBase64, createKeyPairHex, createVerificationKeys, createDidVerificationMethod, createDidPayload, createDidPayloadWithSignInputs, createSignInputsFromKeyPair } from './utils';
//# sourceMappingURL=index.d.ts.map