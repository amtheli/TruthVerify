import { GeneratedType } from "@cosmjs/proto-signing";
import { QueryClient } from "@cosmjs/stargate";
import { CheqdSigningStargateClient } from '../signer';
import { IModuleMethodMap } from "../types";
export declare abstract class AbstractCheqdSDKModule {
    _signer: CheqdSigningStargateClient;
    methods: IModuleMethodMap;
    readonly _protectedMethods: string[];
    static readonly registryTypes: Iterable<[string, GeneratedType]>;
    constructor(signer: CheqdSigningStargateClient);
    abstract getRegistryTypes(): Iterable<[string, GeneratedType]>;
}
export type MinimalImportableCheqdSDKModule<T extends AbstractCheqdSDKModule> = Omit<T, '_signer' | '_protectedMethods' | 'registryTypes' | 'getRegistryTypes'>;
export declare function instantiateCheqdSDKModule<T extends new (...args: any[]) => T>(module: T, ...args: ConstructorParameters<T>): T;
export declare function instantiateCheqdSDKModuleRegistryTypes(module: any): Iterable<[string, GeneratedType]>;
export declare function applyMixins(derivedCtor: any, constructors: any[]): IModuleMethodMap;
export type CheqdExtension<K extends string, V = any> = {
    [P in K]: (Record<P, V> & Partial<Record<Exclude<K, P>, never>>) extends infer O ? {
        [Q in keyof O]: O[Q];
    } : never;
}[K];
export type CheqdExtensions = CheqdExtension<'did' | 'resources', any>;
export declare const setupCheqdExtensions: (base: QueryClient) => CheqdExtensions;
//# sourceMappingURL=_.d.ts.map