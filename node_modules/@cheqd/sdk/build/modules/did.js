"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupDidExtension = exports.DIDModule = exports.MsgUpdateDidResponseEncodeObject = exports.MsgUpdateDidEncodeObject = exports.MsgCreateDidResponseEncodeObject = exports.isMsgCreateDidEncodeObject = exports.typeUrlMsgUpdateDidResponse = exports.typeUrlMsgUpdateDid = exports.typeUrlMsgCreateDidResponse = exports.typeUrlMsgCreateDid = void 0;
const stargate_1 = require("@cosmjs/stargate");
/* import { QueryClientImpl } from '@cheqd/ts-proto/cheqd/v1/query' */
const _1 = require("./_");
const tx_1 = require("@cheqd/ts-proto/cheqd/v1/tx");
exports.typeUrlMsgCreateDid = `/${tx_1.protobufPackage}.MsgCreateDid`;
exports.typeUrlMsgCreateDidResponse = `/${tx_1.protobufPackage}.MsgCreateDidResponse`;
exports.typeUrlMsgUpdateDid = `/${tx_1.protobufPackage}.MsgUpdateDid`;
exports.typeUrlMsgUpdateDidResponse = `/${tx_1.protobufPackage}.MsgUpdateDidResponse`;
function isMsgCreateDidEncodeObject(obj) {
    return obj.typeUrl === exports.typeUrlMsgCreateDid;
}
exports.isMsgCreateDidEncodeObject = isMsgCreateDidEncodeObject;
function MsgCreateDidResponseEncodeObject(obj) {
    return obj.typeUrl === exports.typeUrlMsgCreateDidResponse;
}
exports.MsgCreateDidResponseEncodeObject = MsgCreateDidResponseEncodeObject;
function MsgUpdateDidEncodeObject(obj) {
    return obj.typeUrl === exports.typeUrlMsgUpdateDid;
}
exports.MsgUpdateDidEncodeObject = MsgUpdateDidEncodeObject;
function MsgUpdateDidResponseEncodeObject(obj) {
    return obj.typeUrl === exports.typeUrlMsgUpdateDidResponse;
}
exports.MsgUpdateDidResponseEncodeObject = MsgUpdateDidResponseEncodeObject;
class DIDModule extends _1.AbstractCheqdSDKModule {
    constructor(signer) {
        super(signer);
        this.methods = {
            createDidTx: this.createDidTx.bind(this),
            updateDidTx: this.updateDidTx.bind(this)
        };
    }
    getRegistryTypes() {
        return DIDModule.registryTypes;
    }
    async createDidTx(signInputs, didPayload, address, fee, memo, context) {
        if (!this._signer) {
            this._signer = context.sdk.signer;
        }
        const payload = tx_1.MsgCreateDidPayload.fromPartial(didPayload);
        const signatures = await this._signer.signCreateDidTx(signInputs, payload);
        const value = {
            payload,
            signatures
        };
        const createDidMsg = {
            typeUrl: exports.typeUrlMsgCreateDid,
            value
        };
        return this._signer.signAndBroadcast(address, [createDidMsg], fee, memo);
    }
    async updateDidTx(signInputs, didPayload, address, fee, memo, context) {
        if (!this._signer) {
            this._signer = context.sdk.signer;
        }
        const payload = tx_1.MsgUpdateDidPayload.fromPartial(didPayload);
        const signatures = await this._signer.signUpdateDidTx(signInputs, payload);
        const value = {
            payload,
            signatures
        };
        const updateDidMsg = {
            typeUrl: exports.typeUrlMsgUpdateDid,
            value
        };
        return this._signer.signAndBroadcast(address, [updateDidMsg], fee, memo);
    }
}
exports.DIDModule = DIDModule;
DIDModule.registryTypes = [
    [exports.typeUrlMsgCreateDid, tx_1.MsgCreateDid],
    [exports.typeUrlMsgCreateDidResponse, tx_1.MsgCreateDidResponse],
    [exports.typeUrlMsgUpdateDid, tx_1.MsgUpdateDid],
    [exports.typeUrlMsgUpdateDidResponse, tx_1.MsgUpdateDidResponse],
];
const setupDidExtension = (base) => {
    const rpc = (0, stargate_1.createProtobufRpcClient)(base);
    /* const queryService = new QueryClientImpl(rpc) */
    return {
        did: {
        //...
        }
    };
};
exports.setupDidExtension = setupDidExtension;
//# sourceMappingURL=did.js.map