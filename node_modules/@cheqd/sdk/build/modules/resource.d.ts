import { AbstractCheqdSDKModule, MinimalImportableCheqdSDKModule } from "./_";
import { CheqdSigningStargateClient } from "../signer";
import { EncodeObject, GeneratedType } from "@cosmjs/proto-signing";
import { DidStdFee, IContext, ISignInputs } from '../types';
import { MsgCreateResource, MsgCreateResourcePayload } from "@cheqd/ts-proto/resource/v1/tx";
import { DeliverTxResponse } from "@cosmjs/stargate";
export declare const typeUrlMsgCreateResource: string;
export declare const typeUrlMsgCreateResourceResponse: string;
export interface MsgCreateResourceEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgCreateResource;
    readonly value: Partial<MsgCreateResource>;
}
export declare function isMsgCreateResourceEncodeObject(obj: EncodeObject): obj is MsgCreateResourceEncodeObject;
export declare class ResourceModule extends AbstractCheqdSDKModule {
    static readonly registryTypes: Iterable<[string, GeneratedType]>;
    constructor(signer: CheqdSigningStargateClient);
    getRegistryTypes(): Iterable<[string, GeneratedType]>;
    static getMsgCreateResourcePayloadAminoSignBytes(message: MsgCreateResourcePayload): Uint8Array;
    static signPayload(payload: MsgCreateResourcePayload, signInputs: ISignInputs[]): Promise<MsgCreateResource>;
    createResourceTx(signInputs: ISignInputs[], resourcePayload: Partial<MsgCreateResourcePayload>, address: string, fee: DidStdFee | 'auto' | number, memo?: string, context?: IContext): Promise<DeliverTxResponse>;
}
export type MinimalImportableResourcesModule = MinimalImportableCheqdSDKModule<ResourceModule>;
//# sourceMappingURL=resource.d.ts.map