import { DeliverTxResponse, QueryClient } from "@cosmjs/stargate";
import { CheqdExtension, AbstractCheqdSDKModule, MinimalImportableCheqdSDKModule } from "./_";
import { CheqdSigningStargateClient } from "../signer";
import { DidStdFee, IContext, ISignInputs } from "../types";
import { MsgCreateDid, MsgCreateDidPayload, MsgCreateDidResponse, MsgUpdateDid, MsgUpdateDidPayload, MsgUpdateDidResponse } from "@cheqd/ts-proto/cheqd/v1/tx";
import { EncodeObject, GeneratedType } from "@cosmjs/proto-signing";
export declare const typeUrlMsgCreateDid: string;
export declare const typeUrlMsgCreateDidResponse: string;
export declare const typeUrlMsgUpdateDid: string;
export declare const typeUrlMsgUpdateDidResponse: string;
export interface MsgCreateDidEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgCreateDid;
    readonly value: Partial<MsgCreateDid>;
}
export declare function isMsgCreateDidEncodeObject(obj: EncodeObject): obj is MsgCreateDidEncodeObject;
export interface MsgCreateDidResponseEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgCreateDidResponse;
    readonly value: Partial<MsgCreateDidResponse>;
}
export declare function MsgCreateDidResponseEncodeObject(obj: EncodeObject): obj is MsgCreateDidResponseEncodeObject;
export interface MsgUpdateDidEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgUpdateDid;
    readonly value: Partial<MsgUpdateDid>;
}
export declare function MsgUpdateDidEncodeObject(obj: EncodeObject): obj is MsgUpdateDidEncodeObject;
export interface MsgUpdateDidResponseEncodeObject extends EncodeObject {
    readonly typeUrl: typeof typeUrlMsgUpdateDidResponse;
    readonly value: Partial<MsgUpdateDidResponse>;
}
export declare function MsgUpdateDidResponseEncodeObject(obj: EncodeObject): obj is MsgUpdateDidResponseEncodeObject;
export declare class DIDModule extends AbstractCheqdSDKModule {
    static readonly registryTypes: Iterable<[string, GeneratedType]>;
    constructor(signer: CheqdSigningStargateClient);
    getRegistryTypes(): Iterable<[string, GeneratedType]>;
    createDidTx(signInputs: ISignInputs[], didPayload: Partial<MsgCreateDidPayload>, address: string, fee: DidStdFee | 'auto' | number, memo?: string, context?: IContext): Promise<DeliverTxResponse>;
    updateDidTx(signInputs: ISignInputs[], didPayload: Partial<MsgUpdateDidPayload>, address: string, fee: DidStdFee | 'auto' | number, memo?: string, context?: IContext): Promise<DeliverTxResponse>;
}
export type MinimalImportableDIDModule = MinimalImportableCheqdSDKModule<DIDModule>;
export interface DidExtension extends CheqdExtension<string, {}> {
    did: {};
}
export declare const setupDidExtension: (base: QueryClient) => DidExtension;
//# sourceMappingURL=did.d.ts.map